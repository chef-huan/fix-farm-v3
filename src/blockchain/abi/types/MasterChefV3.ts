/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace INonfungiblePositionManagerStruct {
  export type CollectParamsStruct = {
    tokenId: BigNumberish;
    recipient: string;
    amount0Max: BigNumberish;
    amount1Max: BigNumberish;
  };

  export type CollectParamsStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    recipient: string;
    amount0Max: BigNumber;
    amount1Max: BigNumber;
  };

  export type DecreaseLiquidityParamsStruct = {
    tokenId: BigNumberish;
    liquidity: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    deadline: BigNumberish;
  };

  export type DecreaseLiquidityParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    liquidity: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    deadline: BigNumber;
  };

  export type IncreaseLiquidityParamsStruct = {
    tokenId: BigNumberish;
    amount0Desired: BigNumberish;
    amount1Desired: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    deadline: BigNumberish;
  };

  export type IncreaseLiquidityParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    amount0Desired: BigNumber;
    amount1Desired: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    deadline: BigNumber;
  };
}

export interface MasterChefV3Interface extends utils.Interface {
  contractName: "MasterChefV3";
  functions: {
    "BOOST_PRECISION()": FunctionFragment;
    "CAKE()": FunctionFragment;
    "FARM_BOOSTER()": FunctionFragment;
    "LMPoolDeployer()": FunctionFragment;
    "MAX_BOOST_PRECISION()": FunctionFragment;
    "MAX_DURATION()": FunctionFragment;
    "MIN_DURATION()": FunctionFragment;
    "PERIOD_DURATION()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "WETH()": FunctionFragment;
    "add(uint256,address,bool)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "cakeAmountBelongToMC()": FunctionFragment;
    "collect((uint256,address,uint128,uint128))": FunctionFragment;
    "collectTo((uint256,address,uint128,uint128),address)": FunctionFragment;
    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": FunctionFragment;
    "emergency()": FunctionFragment;
    "getLatestPeriodInfo(address)": FunctionFragment;
    "getLatestPeriodInfoByPid(uint256)": FunctionFragment;
    "harvest(uint256,address)": FunctionFragment;
    "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "latestPeriodCakePerSecond()": FunctionFragment;
    "latestPeriodEndTime()": FunctionFragment;
    "latestPeriodNumber()": FunctionFragment;
    "latestPeriodStartTime()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "nonfungiblePositionManager()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingCake(uint256)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "receiver()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "setEmergency(bool)": FunctionFragment;
    "setLMPoolDeployer(address)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setPeriodDuration(uint256)": FunctionFragment;
    "setReceiver(address)": FunctionFragment;
    "sweepToken(address,uint256,address)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unwrapWETH9(uint256,address)": FunctionFragment;
    "updateBoostMultiplier(uint256,uint256)": FunctionFragment;
    "updateFarmBoostContract(address)": FunctionFragment;
    "updateLiquidity(uint256)": FunctionFragment;
    "updatePools(uint256[])": FunctionFragment;
    "upkeep(uint256,uint256,bool)": FunctionFragment;
    "userPositionInfos(uint256)": FunctionFragment;
    "v3PoolAddressPid(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BOOST_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CAKE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FARM_BOOSTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LMPoolDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BOOST_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERIOD_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cakeAmountBelongToMC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [INonfungiblePositionManagerStruct.CollectParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "collectTo",
    values: [INonfungiblePositionManagerStruct.CollectParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity",
    values: [INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "emergency", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLatestPeriodInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPeriodInfoByPid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPeriodCakePerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestPeriodEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestPeriodNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestPeriodStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "nonfungiblePositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingCake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "receiver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergency",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLMPoolDeployer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPeriodDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setReceiver", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sweepToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH9",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBoostMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFarmBoostContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upkeep",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "userPositionInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "v3PoolAddressPid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BOOST_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CAKE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FARM_BOOSTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LMPoolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BOOST_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERIOD_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cakeAmountBelongToMC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collectTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emergency", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPeriodInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPeriodInfoByPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPeriodCakePerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPeriodEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPeriodNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPeriodStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonfungiblePositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingCake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receiver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLMPoolDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPeriodDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWETH9",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoostMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFarmBoostContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upkeep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPositionInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "v3PoolAddressPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddPool(uint256,uint256,address,address)": EventFragment;
    "Deposit(address,uint256,uint256,uint256,int24,int24)": EventFragment;
    "Harvest(address,address,uint256,uint256,uint256)": EventFragment;
    "NewLMPoolDeployerAddress(address)": EventFragment;
    "NewOperatorAddress(address)": EventFragment;
    "NewPeriodDuration(uint256)": EventFragment;
    "NewReceiver(address)": EventFragment;
    "NewUpkeepPeriod(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetEmergency(bool)": EventFragment;
    "SetPool(uint256,uint256)": EventFragment;
    "UpdateFarmBoostContract(address)": EventFragment;
    "UpdateLiquidity(address,uint256,uint256,int128,int24,int24)": EventFragment;
    "UpdateUpkeepPeriod(uint256,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLMPoolDeployerAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOperatorAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPeriodDuration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReceiver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewUpkeepPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmergency"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFarmBoostContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUpkeepPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AddPoolEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  { pid: BigNumber; allocPoint: BigNumber; v3Pool: string; lmPool: string }
>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, number],
  {
    from: string;
    pid: BigNumber;
    tokenId: BigNumber;
    liquidity: BigNumber;
    tickLower: number;
    tickUpper: number;
  }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type HarvestEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    sender: string;
    to: string;
    pid: BigNumber;
    tokenId: BigNumber;
    reward: BigNumber;
  }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type NewLMPoolDeployerAddressEvent = TypedEvent<
  [string],
  { deployer: string }
>;

export type NewLMPoolDeployerAddressEventFilter =
  TypedEventFilter<NewLMPoolDeployerAddressEvent>;

export type NewOperatorAddressEvent = TypedEvent<
  [string],
  { operator: string }
>;

export type NewOperatorAddressEventFilter =
  TypedEventFilter<NewOperatorAddressEvent>;

export type NewPeriodDurationEvent = TypedEvent<
  [BigNumber],
  { periodDuration: BigNumber }
>;

export type NewPeriodDurationEventFilter =
  TypedEventFilter<NewPeriodDurationEvent>;

export type NewReceiverEvent = TypedEvent<[string], { receiver: string }>;

export type NewReceiverEventFilter = TypedEventFilter<NewReceiverEvent>;

export type NewUpkeepPeriodEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    periodNumber: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    cakePerSecond: BigNumber;
    cakeAmount: BigNumber;
  }
>;

export type NewUpkeepPeriodEventFilter = TypedEventFilter<NewUpkeepPeriodEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type SetEmergencyEvent = TypedEvent<[boolean], { emergency: boolean }>;

export type SetEmergencyEventFilter = TypedEventFilter<SetEmergencyEvent>;

export type SetPoolEvent = TypedEvent<
  [BigNumber, BigNumber],
  { pid: BigNumber; allocPoint: BigNumber }
>;

export type SetPoolEventFilter = TypedEventFilter<SetPoolEvent>;

export type UpdateFarmBoostContractEvent = TypedEvent<
  [string],
  { farmBoostContract: string }
>;

export type UpdateFarmBoostContractEventFilter =
  TypedEventFilter<UpdateFarmBoostContractEvent>;

export type UpdateLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, number, number],
  {
    from: string;
    pid: BigNumber;
    tokenId: BigNumber;
    liquidity: BigNumber;
    tickLower: number;
    tickUpper: number;
  }
>;

export type UpdateLiquidityEventFilter = TypedEventFilter<UpdateLiquidityEvent>;

export type UpdateUpkeepPeriodEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    periodNumber: BigNumber;
    oldEndTime: BigNumber;
    newEndTime: BigNumber;
    remainingCake: BigNumber;
  }
>;

export type UpdateUpkeepPeriodEventFilter =
  TypedEventFilter<UpdateUpkeepPeriodEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { from: string; to: string; pid: BigNumber; tokenId: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MasterChefV3 extends BaseContract {
  contractName: "MasterChefV3";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MasterChefV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BOOST_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    CAKE(overrides?: CallOverrides): Promise<[string]>;

    FARM_BOOSTER(overrides?: CallOverrides): Promise<[string]>;

    LMPoolDeployer(overrides?: CallOverrides): Promise<[string]>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    add(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cakeAmountBelongToMC(overrides?: CallOverrides): Promise<[BigNumber]>;

    collect(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectTo(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decreaseLiquidity(
      params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergency(overrides?: CallOverrides): Promise<[boolean]>;

    getLatestPeriodInfo(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }
    >;

    getLatestPeriodInfoByPid(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }
    >;

    harvest(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseLiquidity(
      params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    latestPeriodCakePerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestPeriodEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestPeriodNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestPeriodStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingCake(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, number, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        v3Pool: string;
        token0: string;
        token1: string;
        fee: number;
        totalLiquidity: BigNumber;
        totalBoostLiquidity: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiver(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEmergency(
      _emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLMPoolDeployer(
      _LMPoolDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepToken(
      token: string,
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapWETH9(
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBoostMultiplier(
      _tokenId: BigNumberish,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFarmBoostContract(
      _newFarmBoostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiquidity(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePools(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upkeep(
      _amount: BigNumberish,
      _duration: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userPositionInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        boostLiquidity: BigNumber;
        tickLower: number;
        tickUpper: number;
        rewardGrowthInside: BigNumber;
        reward: BigNumber;
        user: string;
        pid: BigNumber;
        boostMultiplier: BigNumber;
      }
    >;

    v3PoolAddressPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  CAKE(overrides?: CallOverrides): Promise<string>;

  FARM_BOOSTER(overrides?: CallOverrides): Promise<string>;

  LMPoolDeployer(overrides?: CallOverrides): Promise<string>;

  MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  add(
    _allocPoint: BigNumberish,
    _v3Pool: string,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cakeAmountBelongToMC(overrides?: CallOverrides): Promise<BigNumber>;

  collect(
    params: INonfungiblePositionManagerStruct.CollectParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectTo(
    params: INonfungiblePositionManagerStruct.CollectParamsStruct,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decreaseLiquidity(
    params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergency(overrides?: CallOverrides): Promise<boolean>;

  getLatestPeriodInfo(
    _v3Pool: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }
  >;

  getLatestPeriodInfoByPid(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }
  >;

  harvest(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseLiquidity(
    params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  latestPeriodCakePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  latestPeriodEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  latestPeriodNumber(overrides?: CallOverrides): Promise<BigNumber>;

  latestPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    _from: string,
    _tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingCake(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, number, BigNumber, BigNumber] & {
      allocPoint: BigNumber;
      v3Pool: string;
      token0: string;
      token1: string;
      fee: number;
      totalLiquidity: BigNumber;
      totalBoostLiquidity: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  receiver(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEmergency(
    _emergency: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLMPoolDeployer(
    _LMPoolDeployer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOperator(
    _operatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPeriodDuration(
    _periodDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReceiver(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepToken(
    token: string,
    amountMinimum: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapWETH9(
    amountMinimum: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBoostMultiplier(
    _tokenId: BigNumberish,
    _newMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFarmBoostContract(
    _newFarmBoostContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiquidity(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePools(
    pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upkeep(
    _amount: BigNumberish,
    _duration: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userPositionInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ] & {
      liquidity: BigNumber;
      boostLiquidity: BigNumber;
      tickLower: number;
      tickUpper: number;
      rewardGrowthInside: BigNumber;
      reward: BigNumber;
      user: string;
      pid: BigNumber;
      boostMultiplier: BigNumber;
    }
  >;

  v3PoolAddressPid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE(overrides?: CallOverrides): Promise<string>;

    FARM_BOOSTER(overrides?: CallOverrides): Promise<string>;

    LMPoolDeployer(overrides?: CallOverrides): Promise<string>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    add(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cakeAmountBelongToMC(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    collectTo(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    decreaseLiquidity(
      params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    emergency(overrides?: CallOverrides): Promise<boolean>;

    getLatestPeriodInfo(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }
    >;

    getLatestPeriodInfoByPid(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { cakePerSecond: BigNumber; endTime: BigNumber }
    >;

    harvest(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidity(
      params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    latestPeriodCakePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingCake(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, number, BigNumber, BigNumber] & {
        allocPoint: BigNumber;
        v3Pool: string;
        token0: string;
        token1: string;
        fee: number;
        totalLiquidity: BigNumber;
        totalBoostLiquidity: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergency(_emergency: boolean, overrides?: CallOverrides): Promise<void>;

    setLMPoolDeployer(
      _LMPoolDeployer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReceiver(_receiver: string, overrides?: CallOverrides): Promise<void>;

    sweepToken(
      token: string,
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapWETH9(
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBoostMultiplier(
      _tokenId: BigNumberish,
      _newMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFarmBoostContract(
      _newFarmBoostContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiquidity(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePools(pids: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    upkeep(
      _amount: BigNumberish,
      _duration: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    userPositionInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        liquidity: BigNumber;
        boostLiquidity: BigNumber;
        tickLower: number;
        tickUpper: number;
        rewardGrowthInside: BigNumber;
        reward: BigNumber;
        user: string;
        pid: BigNumber;
        boostMultiplier: BigNumber;
      }
    >;

    v3PoolAddressPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddPool(uint256,uint256,address,address)"(
      pid?: BigNumberish | null,
      allocPoint?: null,
      v3Pool?: string | null,
      lmPool?: string | null
    ): AddPoolEventFilter;
    AddPool(
      pid?: BigNumberish | null,
      allocPoint?: null,
      v3Pool?: string | null,
      lmPool?: string | null
    ): AddPoolEventFilter;

    "Deposit(address,uint256,uint256,uint256,int24,int24)"(
      from?: string | null,
      pid?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      liquidity?: null,
      tickLower?: null,
      tickUpper?: null
    ): DepositEventFilter;
    Deposit(
      from?: string | null,
      pid?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      liquidity?: null,
      tickLower?: null,
      tickUpper?: null
    ): DepositEventFilter;

    "Harvest(address,address,uint256,uint256,uint256)"(
      sender?: string | null,
      to?: null,
      pid?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      reward?: null
    ): HarvestEventFilter;
    Harvest(
      sender?: string | null,
      to?: null,
      pid?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      reward?: null
    ): HarvestEventFilter;

    "NewLMPoolDeployerAddress(address)"(
      deployer?: null
    ): NewLMPoolDeployerAddressEventFilter;
    NewLMPoolDeployerAddress(
      deployer?: null
    ): NewLMPoolDeployerAddressEventFilter;

    "NewOperatorAddress(address)"(
      operator?: null
    ): NewOperatorAddressEventFilter;
    NewOperatorAddress(operator?: null): NewOperatorAddressEventFilter;

    "NewPeriodDuration(uint256)"(
      periodDuration?: null
    ): NewPeriodDurationEventFilter;
    NewPeriodDuration(periodDuration?: null): NewPeriodDurationEventFilter;

    "NewReceiver(address)"(receiver?: null): NewReceiverEventFilter;
    NewReceiver(receiver?: null): NewReceiverEventFilter;

    "NewUpkeepPeriod(uint256,uint256,uint256,uint256,uint256)"(
      periodNumber?: BigNumberish | null,
      startTime?: null,
      endTime?: null,
      cakePerSecond?: null,
      cakeAmount?: null
    ): NewUpkeepPeriodEventFilter;
    NewUpkeepPeriod(
      periodNumber?: BigNumberish | null,
      startTime?: null,
      endTime?: null,
      cakePerSecond?: null,
      cakeAmount?: null
    ): NewUpkeepPeriodEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetEmergency(bool)"(emergency?: null): SetEmergencyEventFilter;
    SetEmergency(emergency?: null): SetEmergencyEventFilter;

    "SetPool(uint256,uint256)"(
      pid?: BigNumberish | null,
      allocPoint?: null
    ): SetPoolEventFilter;
    SetPool(pid?: BigNumberish | null, allocPoint?: null): SetPoolEventFilter;

    "UpdateFarmBoostContract(address)"(
      farmBoostContract?: string | null
    ): UpdateFarmBoostContractEventFilter;
    UpdateFarmBoostContract(
      farmBoostContract?: string | null
    ): UpdateFarmBoostContractEventFilter;

    "UpdateLiquidity(address,uint256,uint256,int128,int24,int24)"(
      from?: string | null,
      pid?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      liquidity?: null,
      tickLower?: null,
      tickUpper?: null
    ): UpdateLiquidityEventFilter;
    UpdateLiquidity(
      from?: string | null,
      pid?: BigNumberish | null,
      tokenId?: BigNumberish | null,
      liquidity?: null,
      tickLower?: null,
      tickUpper?: null
    ): UpdateLiquidityEventFilter;

    "UpdateUpkeepPeriod(uint256,uint256,uint256,uint256)"(
      periodNumber?: BigNumberish | null,
      oldEndTime?: null,
      newEndTime?: null,
      remainingCake?: null
    ): UpdateUpkeepPeriodEventFilter;
    UpdateUpkeepPeriod(
      periodNumber?: BigNumberish | null,
      oldEndTime?: null,
      newEndTime?: null,
      remainingCake?: null
    ): UpdateUpkeepPeriodEventFilter;

    "Withdraw(address,address,uint256,uint256)"(
      from?: string | null,
      to?: null,
      pid?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): WithdrawEventFilter;
    Withdraw(
      from?: string | null,
      to?: null,
      pid?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    CAKE(overrides?: CallOverrides): Promise<BigNumber>;

    FARM_BOOSTER(overrides?: CallOverrides): Promise<BigNumber>;

    LMPoolDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_BOOST_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cakeAmountBelongToMC(overrides?: CallOverrides): Promise<BigNumber>;

    collect(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectTo(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decreaseLiquidity(
      params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergency(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPeriodInfo(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestPeriodInfoByPid(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseLiquidity(
      params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    latestPeriodCakePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodNumber(overrides?: CallOverrides): Promise<BigNumber>;

    latestPeriodStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonfungiblePositionManager(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingCake(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    receiver(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEmergency(
      _emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLMPoolDeployer(
      _LMPoolDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepToken(
      token: string,
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapWETH9(
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBoostMultiplier(
      _tokenId: BigNumberish,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFarmBoostContract(
      _newFarmBoostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiquidity(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePools(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upkeep(
      _amount: BigNumberish,
      _duration: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userPositionInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    v3PoolAddressPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BOOST_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FARM_BOOSTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LMPoolDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_BOOST_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERIOD_DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      _allocPoint: BigNumberish,
      _v3Pool: string,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cakeAmountBelongToMC(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collect(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectTo(
      params: INonfungiblePositionManagerStruct.CollectParamsStruct,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decreaseLiquidity(
      params: INonfungiblePositionManagerStruct.DecreaseLiquidityParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestPeriodInfo(
      _v3Pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestPeriodInfoByPid(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      params: INonfungiblePositionManagerStruct.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    latestPeriodCakePerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPeriodEndTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPeriodNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPeriodStartTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonfungiblePositionManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      _from: string,
      _tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingCake(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEmergency(
      _emergency: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLMPoolDeployer(
      _LMPoolDeployer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPeriodDuration(
      _periodDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReceiver(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepToken(
      token: string,
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapWETH9(
      amountMinimum: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBoostMultiplier(
      _tokenId: BigNumberish,
      _newMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFarmBoostContract(
      _newFarmBoostContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidity(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePools(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upkeep(
      _amount: BigNumberish,
      _duration: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userPositionInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    v3PoolAddressPid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
